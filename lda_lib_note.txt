# 入力

入力はnumpy.arrayのデータ

このデータは(文書数, 単語数)で構成されるデータ

単語は辞書を使って素性IDに変換しておく。



# 補足

topic_wordは(20, 4258)の２次元array
20というはトピック数に相当
4258はvocaburary sizeに相当

行列で考えると、20列と4258行で構成されるデータ

このデータの上でiterationをすると、列ごとにiterationができる。

topic_distをソートすると、トピックに所属する尤度が高いwordを得ることができる。

その上で、ソート済みのindexを上から順に取得する
ここでは負数を指定して、末尾から値が大きい要素を取得する

```
## インデックスに負数を指定すると末尾から数える
>>> a[-1,-2]
```

コロンをつけると、スライスの操作をする。
```
array[-8:-1]
```
と

```
array[:-8:-1]
```

は同じ意味

コロン２つを表記すると、

「逆から、指定したインデックスの直前の要素までを取得する。」という操作を実行する。

documentをみると、

```
seq[start:end:step]
```

とある。

```
In[38]: numpy.array([0, 1, 2, 3, 4, 5])[:-4:-1]
Out[38]: array([5, 4, 3])
```

4のインデックスの直前まで、つまり逆から３つ目の要素までを取得する。

model.doc_topic_メソッドを利用すると、各documentのトピックを得ることができる。document数と同じ分だけの要素と、トピック数と同じ分だけの要素をもつ行列ができあがる。(文書数, トピック数)の行列ができあがる。各列ごとにargmax()をとると、尤度が最大、つまり文書中の最大トピックを取得できる。


# プロットの方法

グラフのプロット方法は標準と変わらないが、そのままだとインタラクティブモードで実行される。なので、グラフプロットできない環境だとエラーで落ちる。

だから、ファイルに出力する方向でグラフを描く。

`matplotlib.use('Agg')`の命令が必要不可欠。

```
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
plt.style.use('ggplot')


グラフプロット処理

plt.savefig( path_topic_distri )
```

の処理をする。
